/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Model.Abstract;
import Modules.PreProcessing.Enum.PreProcessingMethodsSelectionEnum;
import Modules.PreProcessing.Impl.Enum.PartOfSpeechTagSelectionEnum;
import Modules.PreProcessing.Impl.PorterStemmer;
import Modules.PreProcessing.Impl.PosTaggerStopwordRemover;
import Modules.PreProcessing.Impl.StanfordParserLematization;
import Modules.PreProcessing.Impl.SymbolsRemoveUsingLists;
import Modules.PreProcessing.Interfaces.Stemmer;
import Modules.PreProcessing.Interfaces.SymbolsRemover;
import Modules.Output.Arff;
import Modules.Input.FilesLoader;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author USER
 */
public class GenerateTrainingData extends javax.swing.JFrame {

    /**
     * Creates new form CMapMiner
     */
    public GenerateTrainingData() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPathToFiles = new javax.swing.JTextField();
        btnSearchPath = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        btnOutput = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMonitor = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        txtNameOfFile = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        tagCoodinatedConjunction = new javax.swing.JCheckBox();
        tagCardinalNumber = new javax.swing.JCheckBox();
        tagDeterminer = new javax.swing.JCheckBox();
        tagExistencialThere = new javax.swing.JCheckBox();
        tagForeignWord = new javax.swing.JCheckBox();
        tagPrepositionSubordinatedConjunction = new javax.swing.JCheckBox();
        tagAdjective = new javax.swing.JCheckBox();
        tagAdjectiveComparative = new javax.swing.JCheckBox();
        tagAdverbComparative = new javax.swing.JCheckBox();
        tagAdverbSuperlative = new javax.swing.JCheckBox();
        tagParticle = new javax.swing.JCheckBox();
        tagSymbol = new javax.swing.JCheckBox();
        tagTo = new javax.swing.JCheckBox();
        tagInterjection = new javax.swing.JCheckBox();
        tagVerbBaseForm = new javax.swing.JCheckBox();
        tagVerbPastTense = new javax.swing.JCheckBox();
        tagVerbNon3rdPersonSingularPresent = new javax.swing.JCheckBox();
        tagVerb3rdPersonSingularPresent = new javax.swing.JCheckBox();
        tagWhDeterminer = new javax.swing.JCheckBox();
        tagWhPronoun = new javax.swing.JCheckBox();
        tagPossessiveWhPronoun = new javax.swing.JCheckBox();
        tagWhAdverb = new javax.swing.JCheckBox();
        tagPersonalPronoun = new javax.swing.JCheckBox();
        tagPossessiveEnding = new javax.swing.JCheckBox();
        tagPredeterminer = new javax.swing.JCheckBox();
        tagProperNounPlural = new javax.swing.JCheckBox();
        tagProperNounSingular = new javax.swing.JCheckBox();
        tagNounPlural = new javax.swing.JCheckBox();
        tagNounSingularOrMass = new javax.swing.JCheckBox();
        tagModal = new javax.swing.JCheckBox();
        tagAdjectiveSuperlative = new javax.swing.JCheckBox();
        tagVerbGerundPresentParticiple = new javax.swing.JCheckBox();
        tagVerbPastParticiple = new javax.swing.JCheckBox();
        tagPossessivePronoun = new javax.swing.JCheckBox();
        tagAdverb = new javax.swing.JCheckBox();
        tagListItemMarker = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        cmbStemmingMethod = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        chkSymbolRemoval = new javax.swing.JCheckBox();
        txtPathToListOfSymbols = new javax.swing.JTextField();
        btnSearchSymbolsList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CmapMiner");
        setIconImage(new ImageIcon(getClass().getResource("/Resources/Images/CMGenLogo.png")).getImage());
        setIconImages(null);
        setResizable(false);

        jLabel1.setText("Select the source");

        txtPathToFiles.setText("C:\\\\Users\\\\USER\\\\Dropbox\\\\2016_01 Orientação Vinicius dos Santos\\\\08_Projeto Mestrado\\\\Corpus");

        btnSearchPath.setText("Search");
        btnSearchPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPathActionPerformed(evt);
            }
        });

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jLabel2.setText("Output");

        txtOutput.setText("C:\\\\Users\\\\USER\\\\Desktop");
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });

        btnOutput.setText("Search");
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        txtMonitor.setEditable(false);
        txtMonitor.setColumns(20);
        txtMonitor.setRows(5);
        jScrollPane1.setViewportView(txtMonitor);

        jLabel3.setText("Name of the File");

        txtNameOfFile.setText("padrão");

        jLabel6.setText("Select the tags to use");

        tagCoodinatedConjunction.setText("Coordinating Conjunction");

        tagCardinalNumber.setSelected(true);
        tagCardinalNumber.setText("Cardinal Number");

        tagDeterminer.setText("Determiner");

        tagExistencialThere.setText("Existencial There");

        tagForeignWord.setSelected(true);
        tagForeignWord.setText("Foreign word");

        tagPrepositionSubordinatedConjunction.setText("Prep. or Sub conjunction");

        tagAdjective.setSelected(true);
        tagAdjective.setText("Adjective");

        tagAdjectiveComparative.setSelected(true);
        tagAdjectiveComparative.setText("Adjective, comparative");

        tagAdverbComparative.setSelected(true);
        tagAdverbComparative.setText("Adverb, comparative");

        tagAdverbSuperlative.setSelected(true);
        tagAdverbSuperlative.setText("Adverb, superlative");

        tagParticle.setText("Particle");

        tagSymbol.setText("Symbol");

        tagTo.setText("To");

        tagInterjection.setText("Interjection");

        tagVerbBaseForm.setText("Verb, base form");

        tagVerbPastTense.setText("Verb, past tense");

        tagVerbNon3rdPersonSingularPresent.setText("Verb, non 3rd person singular present");

        tagVerb3rdPersonSingularPresent.setText("Verb, 3rd person singular present");

        tagWhDeterminer.setText("WhDeterminer");

        tagWhPronoun.setText("Whpronoun");

        tagPossessiveWhPronoun.setText("Possessive Whpronoun");

        tagWhAdverb.setSelected(true);
        tagWhAdverb.setText("whadverb");

        tagPersonalPronoun.setText("Personal pronoun");

        tagPossessiveEnding.setText("Possessive ending");

        tagPredeterminer.setText("Predeterminer");

        tagProperNounPlural.setSelected(true);
        tagProperNounPlural.setText("Proper noun, plural");

        tagProperNounSingular.setSelected(true);
        tagProperNounSingular.setText("Proper Noun singular");

        tagNounPlural.setSelected(true);
        tagNounPlural.setText("Noun, plural");

        tagNounSingularOrMass.setSelected(true);
        tagNounSingularOrMass.setText("Noun, singular or mass");

        tagModal.setText("Modal");

        tagAdjectiveSuperlative.setSelected(true);
        tagAdjectiveSuperlative.setText("Adjective, superlative");

        tagVerbGerundPresentParticiple.setText("Verb, gerund or present participle");

        tagVerbPastParticiple.setText("Verb, past participle");

        tagPossessivePronoun.setText("Possessive Pronoun");

        tagAdverb.setSelected(true);
        tagAdverb.setText("Adverb");

        tagListItemMarker.setText("List item marker");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tagDeterminer)
                            .addComponent(tagCardinalNumber)
                            .addComponent(tagExistencialThere)
                            .addComponent(tagForeignWord)
                            .addComponent(tagPrepositionSubordinatedConjunction)
                            .addComponent(tagAdjective)
                            .addComponent(tagCoodinatedConjunction)
                            .addComponent(tagAdjectiveComparative)
                            .addComponent(tagAdjectiveSuperlative))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tagPossessivePronoun)
                            .addComponent(tagPersonalPronoun)
                            .addComponent(tagPossessiveEnding)
                            .addComponent(tagPredeterminer)
                            .addComponent(tagProperNounPlural)
                            .addComponent(tagProperNounSingular)
                            .addComponent(tagNounPlural)
                            .addComponent(tagNounSingularOrMass)
                            .addComponent(tagModal))
                        .addGap(67, 67, 67)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tagParticle)
                            .addComponent(tagSymbol)
                            .addComponent(tagVerbBaseForm)
                            .addComponent(tagVerbPastTense)
                            .addComponent(tagVerbGerundPresentParticiple)
                            .addComponent(tagAdverbSuperlative)
                            .addComponent(tagAdverbComparative)
                            .addComponent(tagTo)
                            .addComponent(tagInterjection))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tagVerbPastParticiple)
                            .addComponent(tagVerbNon3rdPersonSingularPresent)
                            .addComponent(tagVerb3rdPersonSingularPresent)
                            .addComponent(tagWhDeterminer)
                            .addComponent(tagWhPronoun)
                            .addComponent(tagPossessiveWhPronoun)
                            .addComponent(tagWhAdverb)
                            .addComponent(tagListItemMarker)
                            .addComponent(tagAdverb)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 749, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(140, 140, 140))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(tagVerbNon3rdPersonSingularPresent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagVerb3rdPersonSingularPresent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagWhDeterminer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagWhPronoun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPossessiveWhPronoun))
                    .addComponent(tagVerbPastParticiple, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tagCoodinatedConjunction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagCardinalNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagDeterminer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagExistencialThere)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagForeignWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPrepositionSubordinatedConjunction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagAdjective)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagAdjectiveComparative)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagAdjectiveSuperlative))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tagAdverbComparative)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagAdverbSuperlative)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagParticle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagSymbol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagInterjection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tagVerbBaseForm)
                            .addComponent(tagWhAdverb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tagVerbPastTense)
                            .addComponent(tagListItemMarker))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tagVerbGerundPresentParticiple)
                            .addComponent(tagAdverb)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tagModal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagNounSingularOrMass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagNounPlural)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagProperNounSingular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagProperNounPlural)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPredeterminer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPossessiveEnding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPersonalPronoun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tagPossessivePronoun)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel7.setText(".arff");

        cmbStemmingMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Don't use Stemmer", "Porter Stemmer", "Stanford Parser Lemmatization" }));

        jLabel5.setText("Steeming Method");

        jLabel4.setText("Symbols Removal");

        chkSymbolRemoval.setText("Use Symbol removal");
        chkSymbolRemoval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSymbolRemovalActionPerformed(evt);
            }
        });

        txtPathToListOfSymbols.setText("C:\\\\Users\\\\USER\\\\Dropbox\\\\2016_01 Orientação Vinicius dos Santos\\\\05_Código\\\\JavaTextMiner\\\\test\\\\resources\\\\Symbols.txt");
        txtPathToListOfSymbols.setEnabled(false);

        btnSearchSymbolsList.setText("Search");
        btnSearchSymbolsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSymbolsListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkSymbolRemoval)
                        .addGap(18, 18, 18)
                        .addComponent(txtPathToListOfSymbols, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchSymbolsList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkSymbolRemoval)
                    .addComponent(txtPathToListOfSymbols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchSymbolsList))
                .addGap(0, 41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNameOfFile)
                            .addComponent(txtOutput, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPathToFiles, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                .addComponent(btnSearchPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel7)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(cmbStemmingMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPathToFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNameOfFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbStemmingMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRun)
                        .addComponent(btnClose)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSearchPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPathActionPerformed
        txtPathToFiles.setText("");
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.showSaveDialog(null);

        //add backslashes
        String p = f.getSelectedFile().getAbsolutePath();
        p = p.replaceAll("\\\\", "\\\\\\\\");
        txtPathToFiles.setText(p);
    }//GEN-LAST:event_btnSearchPathActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        if (txtPathToFiles.getText() != null && !txtPathToFiles.getText().isEmpty()
                && txtOutput.getText() != null && !txtOutput.getText().isEmpty()
                && txtNameOfFile.getText() != null && !txtNameOfFile.getText().isEmpty()) {
            if (chkSymbolRemoval.isSelected() && (txtPathToListOfSymbols.getText() != null || !txtPathToListOfSymbols.getText().isEmpty())) {
                Thread exe = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        runApproach();
                    }
                });
                exe.start();
            } else {
                JOptionPane.showMessageDialog(this,
                        "You need to Fill the 'the path to symbols' fields to make this work.");
            }

        } else {
            JOptionPane.showMessageDialog(this,
                    "You need to Fill the 'path To Files, output and the name of the file' fields to make this work.");
        }
    }//GEN-LAST:event_btnRunActionPerformed

    public void runApproach() {
        ArrayList<Abstract> absList = FilesLoader.loadTrainingData(txtPathToFiles.getText());

        ArrayList<String> tags = selectTags();

        //Pre-process -> Perform stopwords removal
        int i = 0;
        updateGUI("\n----------------\nStopwords removing...\n----------------\n");
        ArrayList<Abstract> stopwordsRemoved = new ArrayList<>();
        for (Abstract r : absList) {
            i++;
            try {
                PosTaggerStopwordRemover p = new PosTaggerStopwordRemover();
                p.setTags(tags);
                Abstract a = r.performStopwordsRemoval(p, PreProcessingMethodsSelectionEnum.STOPWORDS_REMOVAL_BY_POS_TAGGING.getMethod());
                stopwordsRemoved.add(a);
                updateGUI("Abstract " + i + "/" + absList.size() + " [Stopwords removed!]");
                txtMonitor.repaint();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        updateGUI("\n----------------\nStopwords removal done!\n---------------\n");

        //remove symbols
        SymbolsRemover syRm = new SymbolsRemoveUsingLists();

        i = 0;
        ArrayList<Abstract> symbolsCleaned = new ArrayList<>();

        if (chkSymbolRemoval.isSelected()) {
            updateGUI("\n----------------\n Removing Symbols... \n----------------\n");
            for (Abstract r : stopwordsRemoved) {
                i++;
                try {
                    SymbolsRemoveUsingLists p = new SymbolsRemoveUsingLists();
                    Abstract a = r.performSymbolsRemoval(p, PreProcessingMethodsSelectionEnum.SYMBOLS_REMOVAL_USING_LIST.getMethod(), txtPathToListOfSymbols.getText());
                    symbolsCleaned.add(a);
                    updateGUI("Abstract " + i + "/" + absList.size() + " [symbol cleaned!]");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            symbolsCleaned.addAll(stopwordsRemoved);
        }

        updateGUI("\n----------------\nSymbols removal done!\n----------------\n");

        // remove symbols
        i = 0;
        updateGUI("\n----------------\n Performing steem... \n----------------\n");

        ArrayList<Abstract> stemmerApplied = new ArrayList<>();

        if (!"Don't use Stemmer".equals(cmbStemmingMethod.getSelectedItem().toString())) {

            Stemmer p = new PorterStemmer(); //Default Stemmer
            if ("Stanford Parser Lemmatization".equals(cmbStemmingMethod.getSelectedItem().toString())) {
                p = new StanfordParserLematization();
            } else if ("Porter Stemmer".equals(cmbStemmingMethod.getSelectedItem().toString())) {
                p = new PorterStemmer();
            }
            for (Abstract r : symbolsCleaned) {
                i++;
                try {
                    Abstract a = r.performStemming(p, PreProcessingMethodsSelectionEnum.PORTER_STEMMER.getMethod());
                    stemmerApplied.add(a);
                    updateGUI("Abstract = " + i + "/" + absList.size() + " [Stemmed!]");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } else {
            stemmerApplied.addAll(symbolsCleaned);
        }

        updateGUI("\n----------------\nStemming done!\n----------------\n");

        updateGUI("\n----------------\nHandling numbers...\n----------------\n");
        i = 0;
        ArrayList<Abstract> numbersTreated = new ArrayList<>();

        for (Abstract r : stemmerApplied) {
            i++;
            try {
                Abstract a = r.treatNumbers();
                numbersTreated.add(a);
                updateGUI("Abstract = " + i + "/" + absList.size() + " [Stemmed!]");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        updateGUI("\n----------------\nNumbers treatment done!\n----------------\n");

        Arff a = new Arff(txtOutput.getText() + "\\\\" + txtNameOfFile.getText(), txtNameOfFile.getText(), numbersTreated);
        a.exportArfFile();

        updateGUI("\n----------------\nAll done!\n----------------\n");

    }

    public void updateGUI(String msgToUpdate) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                txtMonitor.setText(txtMonitor.getText() + msgToUpdate + "\n");
            }
        });
    }

    public ArrayList<String> selectTags() {
        ArrayList<String> tags = new ArrayList<>();

        if (tagCoodinatedConjunction.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Coordinating_conjunction.getTag());
        }
        if (tagCardinalNumber.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Cardinal_number.getTag());
        }
        if (tagDeterminer.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Determiner.getTag());
        }
        if (tagExistencialThere.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Existential_there.getTag());
        }
        if (tagForeignWord.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Foreign_word.getTag());
        }
        if (tagPrepositionSubordinatedConjunction.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Preposition_or_subordinating_conjunction.getTag());
        }
        if (tagAdjective.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adjective.getTag());
        }
        if (tagAdjectiveComparative.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adjective_Comparative.getTag());
        }
        if (tagAdjectiveSuperlative.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adjective_superlative.getTag());
        }
        if (tagModal.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Modal.getTag());
        }
        if (tagNounSingularOrMass.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Noun_Singular_or_Mass.getTag());
        }
        if (tagNounPlural.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Noun_plural.getTag());
        }
        if (tagProperNounSingular.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Proper_noun_singular.getTag());
        }
        if (tagProperNounPlural.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Proper_noun_plural.getTag());
        }
        if (tagPredeterminer.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Predeterminer.getTag());
        }
        if (tagPossessiveEnding.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Possessive_ending.getTag());
        }
        if (tagPersonalPronoun.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Personal_pronoun.getTag());
        }
        if (tagPossessivePronoun.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Possessive_pronoun.getTag());
        }
        if (tagAdverbComparative.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adverb_comparative.getTag());
        }
        if (tagAdverbSuperlative.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adverb_superlative.getTag());
        }
        if (tagParticle.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Particle.getTag());
        }
        if (tagSymbol.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Symbol.getTag());
        }
        if (tagTo.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.to.getTag());
        }
        if (tagInterjection.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Interjection.getTag());
        }
        if (tagVerbBaseForm.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Verb_base_form.getTag());
        }
        if (tagVerbPastTense.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Verb_past_tense.getTag());
        }
        if (tagVerbGerundPresentParticiple.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Verb_gerund_or_present_participle.getTag());
        }
        if (tagVerbPastParticiple.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Verb_past_participle.getTag());
        }
        if (tagVerbNon3rdPersonSingularPresent.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Verb_non_3rd_person_singular_present.getTag());
        }
        if (tagWhDeterminer.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Wh_determiner.getTag());
        }
        if (tagWhPronoun.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Wh_pronoun.getTag());
        }
        if (tagPossessiveWhPronoun.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Possessive_wh_pronoun.getTag());
        }

        if (tagWhAdverb.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Wh_adverb.getTag());
        }
        if (tagListItemMarker.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.List_item_marker.getTag());
        }
        if (tagAdverb.isSelected()) {
            tags.add(PartOfSpeechTagSelectionEnum.Adverb.getTag());
        }

        return tags;
    }


    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
        txtOutput.setText("");
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.showSaveDialog(null);

        //add backslashes
        String p = f.getSelectedFile().getAbsolutePath();
        p = p.replaceAll("\\\\", "\\\\\\\\");
        txtOutput.setText(p);
    }//GEN-LAST:event_btnOutputActionPerformed

    private void chkSymbolRemovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSymbolRemovalActionPerformed
        if (chkSymbolRemoval.isSelected()) {
            txtPathToListOfSymbols.setEnabled(true);
        } else {
            txtPathToListOfSymbols.setEnabled(false);
        }
    }//GEN-LAST:event_chkSymbolRemovalActionPerformed

    private void btnSearchSymbolsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSymbolsListActionPerformed
        txtOutput.setText("");
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        f.showSaveDialog(null);

        //add backslashes
        String p = f.getSelectedFile().getAbsolutePath();
        p = p.replaceAll("\\\\", "\\\\\\\\");
        txtPathToListOfSymbols.setText(p);
    }//GEN-LAST:event_btnSearchSymbolsListActionPerformed

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateTrainingData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateTrainingData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateTrainingData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateTrainingData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateTrainingData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSearchPath;
    private javax.swing.JButton btnSearchSymbolsList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JCheckBox chkSymbolRemoval;
    private javax.swing.JComboBox<String> cmbStemmingMethod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox tagAdjective;
    private javax.swing.JCheckBox tagAdjectiveComparative;
    private javax.swing.JCheckBox tagAdjectiveSuperlative;
    private javax.swing.JCheckBox tagAdverb;
    private javax.swing.JCheckBox tagAdverbComparative;
    private javax.swing.JCheckBox tagAdverbSuperlative;
    private javax.swing.JCheckBox tagCardinalNumber;
    private javax.swing.JCheckBox tagCoodinatedConjunction;
    private javax.swing.JCheckBox tagDeterminer;
    private javax.swing.JCheckBox tagExistencialThere;
    private javax.swing.JCheckBox tagForeignWord;
    private javax.swing.JCheckBox tagInterjection;
    private javax.swing.JCheckBox tagListItemMarker;
    private javax.swing.JCheckBox tagModal;
    private javax.swing.JCheckBox tagNounPlural;
    private javax.swing.JCheckBox tagNounSingularOrMass;
    private javax.swing.JCheckBox tagParticle;
    private javax.swing.JCheckBox tagPersonalPronoun;
    private javax.swing.JCheckBox tagPossessiveEnding;
    private javax.swing.JCheckBox tagPossessivePronoun;
    private javax.swing.JCheckBox tagPossessiveWhPronoun;
    private javax.swing.JCheckBox tagPredeterminer;
    private javax.swing.JCheckBox tagPrepositionSubordinatedConjunction;
    private javax.swing.JCheckBox tagProperNounPlural;
    private javax.swing.JCheckBox tagProperNounSingular;
    private javax.swing.JCheckBox tagSymbol;
    private javax.swing.JCheckBox tagTo;
    private javax.swing.JCheckBox tagVerb3rdPersonSingularPresent;
    private javax.swing.JCheckBox tagVerbBaseForm;
    private javax.swing.JCheckBox tagVerbGerundPresentParticiple;
    private javax.swing.JCheckBox tagVerbNon3rdPersonSingularPresent;
    private javax.swing.JCheckBox tagVerbPastParticiple;
    private javax.swing.JCheckBox tagVerbPastTense;
    private javax.swing.JCheckBox tagWhAdverb;
    private javax.swing.JCheckBox tagWhDeterminer;
    private javax.swing.JCheckBox tagWhPronoun;
    private javax.swing.JTextArea txtMonitor;
    private javax.swing.JTextField txtNameOfFile;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtPathToFiles;
    private javax.swing.JTextField txtPathToListOfSymbols;
    // End of variables declaration//GEN-END:variables
}
