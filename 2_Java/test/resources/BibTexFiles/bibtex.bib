@INPROCEEDINGS{6140675,
author={R. Abdullah and Z. D. Eri and A. M. Talib},
booktitle={2011 Malaysian Conference in Software Engineering},
title={A model of knowledge management system in managing knowledge of software testing environment},
year={2011},
volume={},
number={},
pages={229-233},
abstract={Software testing is the process on how to identify and deliver the software as a product based on the specification that has been given and required by the users. In order to ensure that the product is working based on the user specification, there are many people who are working together for that purposes as a community of practice (CoP). The CoP in software testing environment is including the system designer, programmer, and system tester as well as the user by himself. Based on this scenario of working together or collaboratively in order to avoid a lot of mistake or errors and causes the software failure, which may be found during the processes of software testing process, so that there is a need for CoP to have a tool called knowledge management system (KMS) in managing the knowledge of best practice and lesson learnt. The paper will discuss the concept on how the KMS is offering of its processes through knowledge life cycle which starting from knowledge acquisition, knowledge storing, knowledge dissemination, and knowledge application. Therefore, by using the model of KMS in managing knowledge of software testing, CoP can utilize the knowledge in KMS and it will reduces the mistake or errors, so that they can delivered a good product besides to enhance the quality of software of the particular users.},
keywords={formal specification;knowledge management;program testing;community of practice;knowledge acquisition;knowledge application;knowledge dissemination;knowledge management system;knowledge storing;software failure;software testing environment;user specification;Computers;Knowledge engineering;Knowledge management;Organizations;Software;Software testing;Collaboration;Knowledge Life Cycle;Knowledge Management;Software Quality;Software Testing},
doi={10.1109/MySEC.2011.6140675},
ISSN={},
month={Dec},}
@INPROCEEDINGS{6607799,
author={},
booktitle={2013 IEEE/ACIS 12th International Conference on Computer and Information Science (ICIS)},
title={Table of contents},
year={2013},
volume={},
number={},
pages={ix-xiv},
abstract={The following topics are dealt with: computer science; software engineering; knowledge creation; innovative society; IWEA IIAI; IIMS; smart enterprise system; intelligent services; high performance computing; data analytics; industrial engineering; technology innovation; data engineering; knowledge management; model-based software testing; learning technology; Web; social networking; image processing; and computer network.},
keywords={business data processing;computer networks;data analysis;image processing;information services;knowledge management;learning (artificial intelligence);multi-agent systems;parallel processing;production engineering computing;program testing;social networking (online);software engineering;technology management;IIAI IIMS;IWEA;Web;computer network;computer science;data analytics;data engineering;high performance computing;image processing;industrial engineering;innovative society;intelligent services;knowledge creation;knowledge management;learning technology;model-based software testing;smart enterprise system;social networking;software engineering;technology innovation},
doi={10.1109/ICIS.2013.6607799},
ISSN={},
month={June},}
@INPROCEEDINGS{5211624,
author={S. H. Rubin and Shu-Ching Chen},
booktitle={2009 IEEE International Conference on Information Reuse Integration},
title={Forward},
year={2009},
volume={},
number={},
pages={ii-ii},
abstract={The following topics are dealt with: fuzzy systems and bioinformatics; data mining; Web services and eBusiness; information reuse; mobile networks and security; software testing; semantic Web and text mining; knowledge management; data visualization; human computer interface; formal methods and software development; schema mapping; database systems; ontology; Web engineering; and natural language processing.},
keywords={Web services;bioinformatics;data mining;deductive databases;electronic commerce;formal languages;fuzzy systems;human computer interaction;natural language processing;Web services;bioinformatics;data mining;data visualization;database systems;eBusiness;formal methods;fuzzy systems;human computer interaction;information reuse;knowledge management;mobile networks;natural language processing;ontology;schema mapping;semantic Web;software development;software testing;Bioinformatics;Computer security;Data mining;Data security;Fuzzy systems;Information security;Mobile computing;Semantic Web;Software testing;Web services},
doi={10.1109/IRI.2009.5211624},
ISSN={},
month={Aug},}
@ARTICLE{5164918,
author={M. Yuan and X. Zhang and Z. Chen and D. R. Vogel and X. Chu},
journal={IEEE Transactions on Engineering Management},
title={Antecedents of Coordination Effectiveness of Software Developer Dyads From Interacting Teams: An Empirical Investigation},
year={2009},
volume={56},
number={3},
pages={494-507},
abstract={Among the numerous reasons for software project failure, coordination problems are especially salient. Prior studies on coordination in software development are confined to team internal coordination and do not explicitly differentiate team internal and external coordination processes. This study presents a research model to explain the antecedents of coordination effectiveness of software developer dyads from interacting teams. Dyads in this study refer to software developer pairs where each member comes from a different team. We explore the antecedents by integrating interpersonal and technology-based coordination. We test this model using data collected from 59 software developer Dyads from interacting teams as well as from software developer leaders. The results reveal that the implicit knowledge sharing has a significant positive impact on coordination effectiveness. The use of explicit knowledge sharing and coordination technology have no statistically significant impact on coordination effectiveness although the teams studied were working predominantly in a collocated mode. Mutual trust and project commitment have a significant impact on knowledge sharing with mutual trust directly affecting both implicit and explicit knowledge sharing. Project commitment also has a direct impact on explicit knowledge sharing and mutual trust, but it does not directly affect implicit knowledge sharing. Theoretical and practical contributions are discussed. Limitations of this study are identified. Future research directions are also presented.},
keywords={software engineering;software fault tolerance;coordination technology;knowledge sharing;mutual trust commitment;project commitment;software developer Dyad;software developer leader;software project failure;Application software;Costs;Electronic mail;Innovation management;Knowledge management;Management information systems;Programming profession;Software testing;System-level design;Technology management;Coordination theory;social capital theory (SCT);software developer dyads;software development;team-external coordination},
doi={10.1109/TEM.2008.927819},
ISSN={0018-9391},
month={Aug},}
@INPROCEEDINGS{7302453,
author={Ã‰. F. Souza and R. A. Falbo and N. L. Vijaykumar},
booktitle={2015 41st Euromicro Conference on Software Engineering and Advanced Applications},
title={Using the Findings of a Mapping Study to Conduct a Research Project: A Case in Knowledge Management in Software Testing},
year={2015},
volume={},
number={},
pages={208-215},
abstract={A mapping study provides a broad overview of a research area in order to determine whether there is research evidence on a particular topic. Results of a systematic mapping may identify suitable areas for performing future research. In this paper, we discuss our experience in using the findings of a mapping study on Knowledge Management (KM) in Software Testing for performing a real research project, which also applied other empirical approaches. The main goals of this paper are: (i) to reinforce the importance of a systematic mapping in the conduction of a research project by discussing a real case of such application, and (ii) to present the results of our survey on the most important aspects of KM when applied to software testing.},
keywords={knowledge management;program testing;knowledge management;software testing;systematic mapping;Ontologies;Planning;Software;Software engineering;Software testing;Systematics;Knowledge Management;Mapping Study;Software Testing;Survey;Systematic Mapping},
doi={10.1109/SEAA.2015.10},
ISSN={1089-6503},
month={Aug},}
@INPROCEEDINGS{1245309,
author={},
booktitle={Proceedings 2003 Symposium on Security and Privacy},
title={Proceedings IEEE International Conference on Software - Science, Technology and Engineering (SwSTE'03)},
year={2003},
volume={},
number={},
pages={},
abstract={The following topics are dealt with: software analysis; software design; software engineering; requirement specification; requirement management; knowledge management; software testing; software quality.},
keywords={knowledge management;program testing;software engineering;knowledge management;requirement management;requirement specification;software analysis;software design;software engineering;software quality;software testing;Software engineering;Software testing},
doi={10.1109/SWSTE.2003.1245309},
ISSN={},
month={Nov},}
@INPROCEEDINGS{7515489,
author={M. Dadkhah},
booktitle={2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
title={Semantic-Based Test Case Generation},
year={2016},
volume={},
number={},
pages={377-378},
abstract={Software testing is a major V\&V activity that revolves around quality test cases. Generating quality test cases is inherently knowledge intensive, tedious and expensive task that is traditionally done by humans. Therefore, a great deal of research has been done to facilitate and automate test case generation as much as possible. Given the knowledge intensity of software test case generation, various knowledge management techniques, such as semantic-based techniques, are applicable. The main focus of our research is automatic generation of quality test cases using available knowledge from the early stages of software development, i.e. the RE. Our goal is to develop a semantic web enabled framework for integrating knowledge from various requirement models to generate effective and efficient test cases automatically. We are going to apply semantic technology to facilitate the test case generation process by means of ontologies and Web of Data.},
keywords={knowledge management;ontologies (artificial intelligence);program testing;semantic networks;software engineering;Web of Data;knowledge management;ontology;semantic-based test case generation;software development;software testing;Data models;Ontologies;Semantic Web;Semantics;Software;Testing;Unified modeling language;UML models;ontology;semantic web;software testing;test case generation},
doi={10.1109/ICST.2016.47},
ISSN={},
month={April},}
@INPROCEEDINGS{5170414,
author={L. Xue-Mei and G. Guochang and L. Yong-Po and W. Ji},
booktitle={2009 WRI World Congress on Computer Science and Information Engineering},
title={Research and Implementation of Knowledge Management Methods in Software Testing Process},
year={2009},
volume={7},
number={},
pages={739-743},
abstract={In software testing organizations, effective knowledge management of the testing process is the key to improve the quality of software testing. One of the most important research questions is how to effectively integrate the knowledge management with the software testing process so that the knowledge assets can be spread and reused in software testing organizations. In this paper, the current state of knowledge management in software testing was analyzed and the major existing problems were identified; a knowledge management system in software testing was designed and implemented. In the mean time, many ontology-based key technologies have been proposed, which could be used in knowledge representation of software testing, search and sorting of the knowledge document, and construction of the knowledge map. Finally, an example of the knowledge map module was given to verify that knowledge management in software testing is reasonable and effective.},
keywords={knowledge management;knowledge representation;ontologies (artificial intelligence);program testing;software quality;software reusability;knowledge assets;knowledge document;knowledge management methods;knowledge map module;knowledge representation;ontology-based key technologies;software quality;software testing organizations;software testing process;Cities and towns;Computer science;Educational institutions;Knowledge engineering;Knowledge management;Knowledge representation;Ontologies;Software engineering;Software testing;Space technology;Knowledge Document;Knowledge Management;Knowledge Map;Knowledge Representation;Ontology;Software Testing Process},
doi={10.1109/CSIE.2009.360},
ISSN={},
month={March},}
@INPROCEEDINGS{1281736,
author={R. Weber and Duanqing Wu},
booktitle={Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings.},
title={Knowledge management for computational intelligence systems},
year={2004},
volume={},
number={},
pages={116-125},
abstract={Computer systems do not learn from previous experiences unless they are designed for this purpose. Computational intelligence systems (CIS) are inherently capable of dealing with imprecise contexts, creating a new solution in each new execution. Therefore, every execution of a CIS is valuable to be learned. We describe an architecture for designing CIS that includes a knowledge management (KM) framework, allowing the system to learn from its own experiences, and those learned in external contexts. This framework makes the system flexible and adaptable so it evolves, guaranteeing high levels of reliability when performing in a dynamic world. This KM framework is being incorporated into the computational intelligence tool for software testing at National Institute for Systems Test and Productivity. This paper introduces the framework describing the two underlying methodologies it uses, i.e. case-based reasoning and monitored distribution; it also details the motivation and requirements for incorporating the framework into CIS.},
keywords={case-based reasoning;knowledge management;learning (artificial intelligence);program testing;software tools;CIS;KM;case-based reasoning;computational intelligence systems;knowledge management;software testing;Aerodynamics;Artificial neural networks;Computational Intelligence Society;Computational intelligence;Educational institutions;Humans;Information science;Knowledge management;Software testing;Systems engineering and theory},
doi={10.1109/HASE.2004.1281736},
ISSN={1530-2059},
month={March},}
@INPROCEEDINGS{6649786,
author={},
booktitle={2013 IEEE 37th Annual Computer Software and Applications Conference},
title={Table of contents},
year={2013},
volume={},
number={},
pages={v-xv},
abstract={The following topics are dealt with: software testing; Internet architecture and applications; big data analytics; knowledge management; mobile computing; pervasive computing; network middleware; cloud computing; reliability modeling; model-based evaluation; software life cycle; data security; trusted computing; data privacy; semantic Web; Web services; requirements engineering; software assurance; formal methods; embedded systems; human-computer interaction; Internet of Things; and software architecture.},
keywords={Internet;data analysis;embedded systems;formal specification;formal verification;information management;middleware;performance evaluation;program testing;security of data;software engineering;trusted computing;ubiquitous computing;Internet applications;Internet architecture;Internet of Things;Web services;big data analytics;cloud computing;data privacy;data security;embedded systems;formal methods;knowledge management;mobile computing;model-based evaluation;network middleware;pervasive computing;reliability modeling;requirements engineering;semantic Web;software architecture;software assurance;software life cycle;software testing;trusted computing},
doi={10.1109/COMPSAC.2013.4},
ISSN={},
month={July},}
@INPROCEEDINGS{6149491,
author={},
booktitle={2012 45th Hawaii International Conference on System Sciences},
title={[Front cover]},
year={2012},
volume={},
number={},
pages={C1-C1},
abstract={The following topics are dealt with: collaboration systems; teaching; learning technologies; cognitive perspectives; collaborative modeling; cross-organizational collaboration; cross-border IS/IT collaboration; distributed group decision-making; global virtual teams; human-computer interaction; negotiation support systems; object oriented GUI; social media; e-business transformation; social networks; healthcare; managerial decision support; fuzzy logic; soft computing; intelligent decision support; supply chain management; digital libraries; information access; social informatics; electric energy systems; information security; trust; electronic government; e-policy; e-governance; infrastructure security; HCI; consumer health informatics issues; data mining; biomedical informatics; digital economy; electronic marketing; social networking; Web mining; knowledge management; business process management; end user computing; radio frequency identification; agile software engineering; digital forensics; secure cloud computing; software product lines; software testing and wireless networks.},
keywords={bioinformatics;cloud computing;data mining;digital libraries;fuzzy logic;government data processing;graphical user interfaces;group decision support systems;groupware;health care;human computer interaction;knowledge management;learning (artificial intelligence);negotiation support systems;object-oriented methods;radiofrequency identification;security of data;social networking (online);software prototyping;supply chain management;teaching;HCI;Web mining;agile software engineering;biomedical informatics;business process management;collaboration systems;collaborative modeling;consumer health informatics issues;cross-border IS/IT collaboration;data mining;digital forensics;digital libraries;distributed group decision-making;e-business transformation;e-governance;electric energy systems;electronic government;electronic marketing;fuzzy logic;global virtual teams;healthcare;human-computer interaction;information security;infrastructure security;knowledge management;learning technologies;managerial decision support;negotiation support systems;object oriented GUI;radio frequency identification;secure cloud computing;social media;social networking;social networks;soft computing;software product lines;supply chain management;teaching;wireless networks},
doi={10.1109/HICSS.2012.701},
ISSN={1530-1605},
month={Jan},}
@INPROCEEDINGS{6690530,
author={E. F. Souza and R. A. Falbo and N. L. Vijaykumar},
booktitle={2013 17th IEEE International Enterprise Distributed Object Computing Conference Workshops},
title={Using Ontology Patterns for Building a Reference Software Testing Ontology},
year={2013},
volume={},
number={},
pages={21-30},
abstract={Software testing is a critical process for achieving product quality. Its importance is more and more recognized, and there is a growing concern in improving the accomplishment of this process. In this context, Knowledge Management emerges as an important supporting tool. However, managing relevant knowledge to reuse is difficult and it requires some means to represent and to associate semantics to a large volume of test information. In order to address this problem, we have developed a Reference Ontology on Software Testing (ROost). ROost is built reusing ontology patterns from the Software Process Ontology Pattern Language (SP-OPL). In this paper, we discuss how ROost was developed, and present a fragment of Roost that concerns with software testing process, its activities, artifacts, and procedures.},
keywords={knowledge management;knowledge representation languages;object-oriented programming;ontologies (artificial intelligence);program testing;ROost;SP-OPL;Software Process Ontology Pattern Language;knowledge management;ontology patterns reuse;product quality;reference software testing ontology;semantics;Context;Ontologies;Software;Software testing;Standards;Unified modeling language;Ontology;Ontology Design Patterns;Ontology Pattern Language;Software Testing},
doi={10.1109/EDOCW.2013.10},
ISSN={2325-6583},
month={Sept},}
@INPROCEEDINGS{5709948,
author={Li Xu-Xiang and W. N. Zhang},
booktitle={The 2010 International Conference on Apperceiving Computing and Intelligence Analysis Proceeding},
title={The PDCA-based software testing improvement framework},
year={2010},
volume={},
number={},
pages={490-494},
abstract={As one of the most challenging and costly processes, the software testing provides strong support for the high quality software. The popular process improvement models do not adequately address testing application issues, nor has the knowledge management (KM) implementation in testing been well defined. The plan-do-check-action (PDCA)-based testing improvement framework is proposed to address these issues. The framework contains the adaptive processes definition, the processes implementation and measurement analysis, and benchmarking-based assessment approach. Experiments show that: the framework can stimulate team member's subjective initiative, promote the software testing process and improve the testing service quality.},
keywords={program testing;software process improvement;software quality;PDCA;adaptive process;benchmarking-based assessment;plan-do-check-action-based testing;software testing improvement;software testing service quality;Benchmark testing;Organizations;Software;Software testing;Standards organizations;PDCA;Testing process;benchmarking;knowledge management},
doi={10.1109/ICACIA.2010.5709948},
ISSN={},
month={Dec},}
@INPROCEEDINGS{5190189,
author={Y. Liu and J. Wu and X. Liu and G. Gu},
booktitle={2009 International Conference on Information Technology and Computer Science},
title={Investigation of Knowledge Management Methods in Software Testing Process},
year={2009},
volume={2},
number={},
pages={90-94},
abstract={Effective knowledge management of the testing process is the key to improve the quality of software testing. Knowledge management has different features in software testing. One of the most important research questions is how to effectively integrate the knowledge management with the software testing process so that the knowledge assets can be spread and reused in software testing organizations. In this paper, the current state of knowledge management in software testing was analyzed and the major existing problems were identified; knowledge management methods was proposed towards a knowledge management system in software testing was designed and implemented. Simultaneously many key technologies are discussed, such as knowledge representation, knowledge map and etc. At last, an application instance based on this model is given in the project of QESuite2.0 to verify that knowledge management in software testing is reasonable and effective.},
keywords={knowledge management;knowledge representation;program testing;software quality;QESuite2.0;knowledge asset;knowledge management;knowledge map;knowledge representation;software quality;software testing;Computer science;Educational institutions;Information technology;Knowledge engineering;Knowledge management;Knowledge representation;Knowledge transfer;Software engineering;Software testing;Software tools;Knowledge Management Model;Knowledge Map;Knowledge Representation;Ontology;Software Testing process},
doi={10.1109/ITCS.2009.157},
ISSN={},
month={July},}
@INPROCEEDINGS{7516150,
author={A. Sambhanthan and V. Potdar},
booktitle={2016 IEEE 14th International Conference on Software Engineering Research, Management and Applications (SERA)},
title={A survey of Western Australian Software Businesses an exlporative web content analysis},
year={2016},
volume={},
number={},
pages={225-234},
abstract={This paper surveys the Western Australian Software Businesses. A literature survey of Australian software firms has been done. Documented studies on Australian software businesses includes themes such as quality management systems, knowledge intensive service activities, requirement engineering practices, software testing practices, knowledge management practices and project management practices. The web content analysis shows that there are around 334 western Australian software businesses that have a web presence. Amongst this there are around 285 project based companies and 49 product based companies which are widespread across twenty towns in the Western Australian state. The key business aspects which are primarily important for the success of Western Australian software businesses are identified as the geographic distribution, human resources structure, business incubation and vendor orientation. Finally we are outlining a number of implications for Western Australian Software businesses to boost their businesses in the forthcoming years.},
keywords={DP industry;Internet;information analysis;software development management;Web content analysis;Western Australian software business;business incubation aspect;geographic distribution aspect;human resources structure aspect;knowledge intensive service activities;knowledge management practices;project management practices;quality management systems;requirement engineering practices;software testing practices;vendor orientation aspect;Australia;Companies;Industries;Knowledge management;Software;Business Incubation;Business Sustinability;Software Businessess;Survey;Western Australia},
doi={10.1109/SERA.2016.7516150},
ISSN={},
month={June},}
@INPROCEEDINGS{7224491,
author={N. B. Moe and D. Cruzes and T. DybÃ¥ and E. Mikkelsen},
booktitle={2015 IEEE 10th International Conference on Global Software Engineering},
title={Continuous Software Testing in a Globally Distributed Project},
year={2015},
volume={},
number={},
pages={130-134},
abstract={In globally distributed software projects the testing expertise may be scattered across multiple locations. We describe and discuss a globally distributed agile project at DNV GL Software, a multinational provider of software for a safer, smarter and greener future in the energy, process and maritime industries. DNV GL Software is headquartered in Norway. The project is distributed across two locations with 12 team members in Norway and three testers in China. In a distributed agile team with little overlap in working hours the challenge is to coordinate tasks and test activities in a way that makes coordination and communication efficient. DNV GL Software believes in including the remote testers as part of the agile team, enabling self-managing, cross-functional virtual teams that are capable of taking the full responsibility for implementing and verifying one entire feature. To support the communication between testers in China and the rest of the team in Norway, the team needs a shared understanding of the goal of a release and how to collaborate. We conducted interviews with the team and representatives from different roles in the organization, and we performed retrospectives with the team. In this article we describe how continuous testing based on continuous and frequent feedback ensures knowledge sharing and safeguarding the quality of the system under development. We found the following enablers for a successful virtual agile team: coordination by mutual adjustment, dedicated testers and low turnover, shifting working hours, and self-management and autonomy. Non-technical factors, such as socio-technical and organizational factors, have a significant influence on the way software testing is performed in an agile virtual team. To be successful the organization needs to invest in bringing the remote testers closer to the rest of the team, as part of the virtual team.},
keywords={program testing;project management;software prototyping;DNV GL Software;continuous software testing;globally distributed agile software project;knowledge sharing;mutual adjustment;remote tester;system quality safeguarding;virtual agile team;Computer bugs;Context;Documentation;Software;Software testing;Virtual groups;agile;distributed agile;test centers;testing;virtual teams},
doi={10.1109/ICGSE.2015.24},
ISSN={2329-6305},
month={July},}
@INPROCEEDINGS{8004360,
author={S. Vasanthapriyan and J. Tian and D. Zhao and S. Xiong and J. Xiang},
booktitle={2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
title={An Ontology-Based Knowledge Sharing Portal for Software Testing},
year={2017},
volume={},
number={},
pages={472-479},
abstract={Software testing is a sub area of software engineering which is also a knowledge intensive and collaborative activity. Our previous study results revealed that knowledge in the repositories were outdated, internal documents are unstructured and varied formats, less accessing facilities and lack of targeted delivery methods, such that software testers from software companies are highly affected by not being able to get vital information required to carryout their software testing activities. Ontologies emerge as one of the more appropriate knowledge management tools for supporting knowledge representation, processing, storage and retrieval. A Software testing ontology is designed to represent the necessary software testing knowledge within the software testers' context. The ontology-based Knowledge Sharing Portal is introduced into the semantic representation of software testing knowledge. SPARQL is used as the query language to retrieve software testing knowledge from the semantic storage. Both Ontology experts and non-experts evaluated the developed ontology.},
keywords={knowledge management;ontologies (artificial intelligence);portals;program testing;query languages;SPARQL;collaborative activity;knowledge management tools;knowledge processing;knowledge representation;knowledge retrieval;knowledge storage;ontology-based knowledge sharing portal;semantic representation;semantic storage;software engineering;software testing;Companies;Ontologies;Portals;Semantics;Software;Software testing;knowledge sharing;ontology based knowledge management system;software testing knowledge;software testing ontology},
doi={10.1109/QRS-C.2017.82},
ISSN={},
month={July},}
@INPROCEEDINGS{4419566,
author={Ong Kein Wei and Tang Mei Ying},
booktitle={2007 IEEE International Conference on Industrial Engineering and Engineering Management},
title={Knowledge management approach in mobile software system testing},
year={2007},
volume={},
number={},
pages={2120-2123},
abstract={Software testing is the last phase in the software development life cycle (SDLC) which aims to test and capture any defects before the software is being deployed. System test is more concentrated on black box testing whereby the functionality and integration between software, hardware and computer system is tested. Motorola Global Software Group Malaysia, Penang (GSG Penang) is the core test team for iDENtrade phone software system testing. The main activity of iDENtrade phone software system test is to conduct phone software functionality test, mobile data (such as GPS and circuit data call) test as well as software stress test through the iDENtrade network simulation in Penang. This paper discusses the proposal of implementing test knowledge management framework in iDENtrade phone software system testing and how the knowledge management approach can benefit the testing team in terms of cost and productivity.},
keywords={knowledge management;program testing;software development management;Motorola Global Software Group Malaysia;black box testing;iDEN phone software system testing;knowledge management;mobile software system testing;phone software functionality test;software development life cycle;software stress test;Circuit testing;Global Positioning System;Hardware;Knowledge management;Life testing;Programming;Software systems;Software testing;Stress;System testing;System testing;knowledge management;test knowledge},
doi={10.1109/IEEM.2007.4419566},
ISSN={2157-3611},
month={Dec},}
@INPROCEEDINGS{7592759,
author={},
booktitle={2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
title={[Title page i]},
year={2016},
volume={},
number={},
pages={i-i},
abstract={The following topics are dealt with: life-cycle management; risk management; decision making support; software architecture; software process improvement; software management; software measurement; knowledge management; model-based development; software quality; software ecosystems; education ecosystems; autonomous systems; software testing; software test automation; industrial control IoT; embedded software requirements; embedded software analysis; software engineering; software product lines; business process management; and systems engineering.},
keywords={Internet of Things;business data processing;decision making;embedded systems;formal specification;formal verification;industrial control;knowledge management;program testing;risk management;software architecture;software management;software process improvement;software product lines;software quality;IoT;autonomous systems;business process management;decision making support;education ecosystems;embedded software analysis;embedded software requirements;industrial control;knowledge management;life-cycle management;model-based development;risk management;software architecture;software ecosystems;software engineering;software management;software measurement;software process improvement;software product lines;software quality;software test automation;software testing;systems engineering},
doi={10.1109/SEAA.2016.1},
ISSN={2376-9505},
month={Aug},}
@INPROCEEDINGS{6063140,
author={},
booktitle={2011 IEEE Sixth International Conference on Global Software Engineering},
title={[Front cover]},
year={2011},
volume={},
number={},
pages={C1-C1},
abstract={The following topics are dealt with: governance patterns; knowledge management; people management; software testing; software quality; agile software engineering; education and communication.},
keywords={},
doi={10.1109/ICGSE.2011.37},
ISSN={2329-6305},
month={Aug},}
@INPROCEEDINGS{1290444,
author={},
booktitle={2004 Australian Software Engineering Conference. Proceedings.},
title={Proceedings. 2004 Australian Software Engineering Conference},
year={2004},
volume={},
number={},
pages={},
abstract={The following topics are dealt with: requirements engineering; project management; formal specification; software testing; knowledge management; specification language; software maintenance; software reusability; formal verification; software training; software architecture; software process assessment; software development management.},
keywords={computer based training;formal specification;formal verification;knowledge management;program testing;project management;software architecture;software development management;software maintenance;software process improvement;software reusability;specification languages;formal specification;formal verification;knowledge management;project management;requirements engineering;software architecture;software development management;software maintenance;software process assessment;software reusability;software testing;software training;specification language},
doi={10.1109/ASWEC.2004.1290444},
ISSN={},
month={April},}
@INPROCEEDINGS{1508050,
author={},
booktitle={29th Annual International Computer Software and Applications Conference (COMPSAC'05)},
title={Proceedings of the 29th Annual International Computer Software and Applications Conference (COMPSAC 2005)},
year={2005},
volume={2},
number={},
pages={},
abstract={The following topics are dealt with: computer software; software specification; software testing process control; data mining; knowledge management; Internet; software cybernetics; extreme programming; agile development; component-based system.},
keywords={Internet;data mining;formal specification;formal verification;knowledge management;object-oriented programming;program testing;software prototyping;software quality;Internet;agile development;component-based system;computer software;data mining;extreme programming;knowledge management;software cybernetics;software specification;software testing process control},
doi={10.1109/COMPSAC.2005.6},
ISSN={0730-3157},
month={July},}
@INPROCEEDINGS{4343729,
author={O. Taipale and K. Karhu and K. Smolander},
booktitle={First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007)},
title={Observing Software Testing Practice from the Viewpoint of Organizations and Knowledge Management},
year={2007},
volume={},
number={},
pages={21-30},
abstract={The objective of this qualitative study was to understand the complex practice of software testing, and based on this understanding, to develop hypotheses on testing organizations and knowledge management. The population of the study consisted of organizational units (OUs) that develop and test technical software for automation or telecommunication domains. First, a survey of testing practices was conducted and 26 OUs were interviewed. From this sample, five OUs were further selected for an in-depth case study. The study used grounded theory as its research method and the data was collected from 41 theme-based interviews. The analysis yielded hypotheses that included that the business orientation of an OU affects testing organization, knowledge management strategy, and outsourcing of testing. Further, identifying and avoiding barriers and using enablers improve knowledge transfer between development and testing. The results of this study can be used in developing the testing organization and the knowledge management strategy of an OU.},
keywords={Automatic testing;Automation;Best practices;Knowledge management;Knowledge transfer;Life testing;Outsourcing;Software engineering;Software measurement;Software testing},
doi={10.1109/ESEM.2007.18},
ISSN={1949-3770},
month={Sept},}
